import imaplib
import email
from email.header import decode_header
import asyncio
from telegram import Bot
from telegram.ext import Application
import re
import pickle
import os
import logging
import psutil
import gc
import tracemalloc
from collections import deque
from asyncio import Lock

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(message)s')
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = ""  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –æ—Ç BotFather
CHAT_ID = ""
EMAIL = ""
PASSWORD = ""
IMAP_SERVER = ""
ALLOWED_SENDER_EMAIL = ""
CACHE_FILE = "folder_cache.pkl"
QUEUE_FILE = "delete_queue.pkl"
TARGET_FOLDER = "INBOX/SSPVO"
CHECK_INTERVAL = 120  # 2 –º–∏–Ω—É—Ç—ã
MAX_EMAILS = 3  # –ú–∞–∫—Å–∏–º—É–º 3 –ø–∏—Å—å–º–∞ –∑–∞ —Ä–∞–∑
DELETE_AFTER = 600  # –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (10 –º–∏–Ω—É—Ç)
ALLOWED_DOMAIN = ""
ALLOWED_URL_PREFIX = ""

bot = Bot(token=TOKEN)
cached_folder = None
mail_connection = None

# –û—á–µ—Ä–µ–¥—å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
delete_queue = deque()
queue_lock = Lock()

def load_cached_folder():
    global cached_folder
    if os.path.exists(CACHE_FILE):
        try:
            with open(CACHE_FILE, 'rb') as f:
                cached_folder = pickle.load(f)
                logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω –∫—ç—à –ø–∞–ø–∫–∏: {cached_folder}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞ –ø–∞–ø–∫–∏: {e}")
            cached_folder = None
    return cached_folder

def save_cached_folder(folder_name):
    global cached_folder
    cached_folder = folder_name
    try:
        with open(CACHE_FILE, 'wb') as f:
            pickle.dump(folder_name, f)
        logger.info(f"–ö—ç—à –ø–∞–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {folder_name}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞ –ø–∞–ø–∫–∏: {e}")

def load_delete_queue():
    global delete_queue
    if os.path.exists(QUEUE_FILE):
        try:
            with open(QUEUE_FILE, 'rb') as f:
                loaded_queue = pickle.load(f)
                current_time = asyncio.get_event_loop().time()
                # –§–∏–ª—å—Ç—Ä—É–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—Å—Ç–∞—Ä—à–µ DELETE_AFTER)
                delete_queue = deque(
                    (chat_id, msg_id, timestamp)
                    for chat_id, msg_id, timestamp in loaded_queue
                    if current_time - timestamp < DELETE_AFTER
                )
                logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–∞ –æ—á–µ—Ä–µ–¥—å —É–¥–∞–ª–µ–Ω–∏—è: {len(delete_queue)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—á–µ—Ä–µ–¥–∏ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
            delete_queue = deque()
    else:
        logger.info("–§–∞–π–ª –æ—á–µ—Ä–µ–¥–∏ —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—É—é –æ—á–µ—Ä–µ–¥—å")

def save_delete_queue():
    try:
        with open(QUEUE_FILE, 'wb') as f:
            pickle.dump(list(delete_queue), f)
        logger.info(f"–û—á–µ—Ä–µ–¥—å —É–¥–∞–ª–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {len(delete_queue)} —Å–æ–æ–±—â–µ–Ω–∏–π")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏ —É–¥–∞–ª–µ–Ω–∏—è: {e}")

def extract_email_address(from_header):
    if not from_header:
        return ""
    match = re.search(r'<(.+?)>', from_header)
    return match.group(1).lower() if match else from_header.lower()

async def verify_message_exists(chat_id, message_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ."""
    try:
        await bot.get_chat(chat_id=chat_id)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —á–∞—Ç—É
        return True
    except Exception as e:
        logger.error(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –≤ —á–∞—Ç–µ {chat_id} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: {e}")
        return False

async def fetch_emails():
    global mail_connection, cached_folder
    process = psutil.Process()
    memory_usage = process.memory_info().rss / 1024 / 1024
    logger.info(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {memory_usage:.2f} MB")

    tracemalloc.start()
    start_snapshot = tracemalloc.take_snapshot()

    try:
        if not mail_connection or not mail_connection.socket:
            if mail_connection:
                try:
                    mail_connection.logout()
                    logger.info("–ü—Ä–µ–¥—ã–¥—É—â–µ–µ IMAP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
                except:
                    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
            mail_connection = imaplib.IMAP4_SSL(IMAP_SERVER)
            mail_connection.login(EMAIL, PASSWORD)
            logger.info("–ù–æ–≤–æ–µ IMAP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

        target_folder = cached_folder if cached_folder else TARGET_FOLDER
        logger.info(f"–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ø–∞–ø–∫–µ: {target_folder}")
        status, _ = mail_connection.select(f'"{target_folder}"')
        if status != "OK":
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É: {target_folder}. –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à...")
            cached_folder = None
            save_cached_folder(None)
            if mail_connection:
                mail_connection.logout()
                mail_connection = None
            return

        logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–ø–∫—É: {target_folder}")

        status, messages = mail_connection.search(None, f'(UNSEEN FROM "{ALLOWED_SENDER_EMAIL}")')
        if status != "OK":
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–∏—Å–µ–º")
            return

        email_ids = messages[0].split()[:MAX_EMAILS]
        for e_id in email_ids:
            try:
                _, msg_data = mail_connection.fetch(e_id, "(RFC822)")
                raw_email = msg_data[0][1]
                msg = email.message_from_bytes(raw_email)

                subject, encoding = decode_header(msg["Subject"])[0]
                if isinstance(subject, bytes):
                    subject = subject.decode(encoding or "utf-8", errors='ignore')

                from_ = msg.get("From", "")
                actual_email = extract_email_address(from_)
                if ALLOWED_SENDER_EMAIL.lower() not in actual_email:
                    continue

                body = ""
                if msg.is_multipart():
                    for part in msg.walk():
                        if part.get_content_type() == "text/plain":
                            body = part.get_payload(decode=True).decode(errors='ignore')
                            break
                else:
                    body = msg.get_payload(decode=True).decode(errors='ignore')

                code_match = re.search(r'–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥:\s*(\d{6})', body)
                message_text = (
                    f"üîê *–ù–æ–≤—ã–π –∫–æ–¥ SSPVO*\n\n–ö–æ–¥: `{code_match.group(1)}`\n\n"
                    f"[–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è](http://10.3.60.2/account/user/20191/emailcode)"
                    if code_match
                    else f"‚úâÔ∏è *–ü–∏—Å—å–º–æ –æ—Ç SSPVO*\n\n{body[:500]}"
                )

                try:
                    sent_message = await bot.send_message(
                        chat_id=CHAT_ID,
                        text=message_text,
                        parse_mode="Markdown",
                        disable_web_page_preview=True
                    )
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {sent_message.message_id} –¥–ª—è –ø–∏—Å—å–º–∞ {e_id}")

                    async with queue_lock:
                        delete_queue.append((sent_message.chat_id, sent_message.message_id, asyncio.get_event_loop().time()))
                        save_delete_queue()

                    mail_connection.store(e_id, "+FLAGS", "\\Seen")

                except Exception as telegram_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram –¥–ª—è –ø–∏—Å—å–º–∞ {e_id}: {telegram_error}")
                    continue

                del msg, raw_email, msg_data, subject, from_, body, message_text, code_match
                gc.collect()

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∏—Å—å–º–∞ {e_id}: {e}")
                continue

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        if cached_folder:
            logger.info("–°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
            cached_folder = None
            save_cached_folder(None)
    finally:
        if mail_connection:
            try:
                mail_connection.logout()
                mail_connection = None
                logger.info("IMAP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            gc.collect()

    end_snapshot = tracemalloc.take_snapshot()
    top_stats = end_snapshot.compare_to(start_snapshot, 'lineno')
    for stat in top_stats[:10]:
        logger.info(f"–¢–æ–ø —É—Ç–µ—á–∫–∞ –ø–∞–º—è—Ç–∏: {stat}")

async def auto_delete_messages():
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏, –µ—Å–ª–∏ –∏—Ö –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∏—Å—Ç–µ–∫–ª–æ."""
    while True:
        await asyncio.sleep(CHECK_INTERVAL)
        now = asyncio.get_event_loop().time()
        logger.info(f"–ó–∞–ø—É—Å–∫ auto_delete_messages, —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏: {len(delete_queue)}")
        async with queue_lock:
            logger.info(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ delete_queue: {list(delete_queue)}")
            while delete_queue and (now - delete_queue[0][2]) >= DELETE_AFTER:
                chat_id, message_id, _ = delete_queue.popleft()
                if await verify_message_exists(chat_id, message_id):
                    try:
                        await bot.delete_message(chat_id=chat_id, message_id=message_id)
                        logger.info(f"üóë –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}")
                    except Exception as e:
                        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}: {e}")
                else:
                    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
                save_delete_queue()
        logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ auto_delete_messages, —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏: {len(delete_queue)}")

async def main():
    load_cached_folder()
    load_delete_queue()
    logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ {CHECK_INTERVAL} —Å–µ–∫—É–Ω–¥, –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–∞–ø–∫–µ '{TARGET_FOLDER}'...")

    app = Application.builder().token(TOKEN).build()

    await app.initialize()
    await app.start()

    asyncio.create_task(auto_delete_messages())
    asyncio.create_task(run_email_loop())

    while True:
        await asyncio.sleep(3600)

async def run_email_loop():
    while True:
        await fetch_emails()
        await asyncio.sleep(CHECK_INTERVAL)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        if 'mail_connection' in globals() and mail_connection:
            try:
                mail_connection.logout()
                logger.info("IMAP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ")
            except:
                pass
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
