import imaplib
import email
from email.header import decode_header
import asyncio
from telegram import Bot
from telegram.ext import Application
import re
import pickle
import os
import logging
import psutil
import gc
import tracemalloc
from collections import deque
from asyncio import Lock

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(message)s')
logger = logging.getLogger(__name__)

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
TOKEN = os.getenv("TELEGRAM_TOKEN", "")       # –ª—É—á—à–µ —á–µ—Ä–µ–∑ env
CHAT_ID = os.getenv("TELEGRAM_CHAT_ID", "")
EMAIL = os.getenv("IMAP_USER", "")
PASSWORD = os.getenv("IMAP_PASS", "")
IMAP_SERVER = os.getenv("IMAP_SERVER", "")
ALLOWED_SENDER_EMAIL = os.getenv("ALLOWED_SENDER_EMAIL", "").lower()
ALLOWED_DOMAIN = os.getenv("ALLOWED_DOMAIN", "").lower()
ALLOWED_URL_PREFIX = os.getenv("ALLOWED_URL_PREFIX", "")
CACHE_FILE = "folder_cache.pkl"
QUEUE_FILE = "delete_queue.pkl"
TARGET_FOLDER = "INBOX/SSPVO"
CHECK_INTERVAL = 120    # 2 –º–∏–Ω—É—Ç—ã
MAX_EMAILS = 3          # –Ω–µ –±–æ–ª–µ–µ 3 –∑–∞ —Ä–∞–∑
DELETE_AFTER = 600      # —É–¥–∞–ª—è—Ç—å —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç

bot = Bot(token=TOKEN)
cached_folder = None
mail_connection = None

delete_queue = deque()
queue_lock = Lock()

def load_cached_folder():
    global cached_folder
    if os.path.exists(CACHE_FILE):
        try:
            with open(CACHE_FILE, 'rb') as f:
                cached_folder = pickle.load(f)
                logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω –∫—ç—à –ø–∞–ø–∫–∏: {cached_folder}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞ –ø–∞–ø–∫–∏: {e}")
            cached_folder = None
    return cached_folder

def save_cached_folder(folder_name):
    global cached_folder
    cached_folder = folder_name
    try:
        with open(CACHE_FILE, 'wb') as f:
            pickle.dump(folder_name, f)
        logger.info(f"–ö—ç—à –ø–∞–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {folder_name}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞ –ø–∞–ø–∫–∏: {e}")

def load_delete_queue():
    global delete_queue
    if os.path.exists(QUEUE_FILE):
        try:
            with open(QUEUE_FILE, 'rb') as f:
                items = pickle.load(f)
            now = asyncio.get_event_loop().time()
            delete_queue = deque(
                (cid, mid, ts)
                for cid, mid, ts in items
                if now - ts < DELETE_AFTER
            )
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–∞ –æ—á–µ—Ä–µ–¥—å —É–¥–∞–ª–µ–Ω–∏—è: {len(delete_queue)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—á–µ—Ä–µ–¥–∏ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
            delete_queue = deque()
    else:
        logger.info("–û—á–µ—Ä–µ–¥—å —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äî –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—É—é")

def save_delete_queue():
    try:
        with open(QUEUE_FILE, 'wb') as f:
            pickle.dump(list(delete_queue), f)
        logger.info(f"–û—á–µ—Ä–µ–¥—å —É–¥–∞–ª–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {len(delete_queue)} —Å–æ–æ–±—â–µ–Ω–∏–π")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏ —É–¥–∞–ª–µ–Ω–∏—è: {e}")

def extract_email_address(from_header: str) -> str:
    match = re.search(r'<(.+?)>', from_header)
    return match.group(1).lower() if match else from_header.lower()

async def verify_message_exists(chat_id, message_id):
    try:
        await bot.get_chat(chat_id=chat_id)
        return True
    except Exception as e:
        logger.debug(f"–ß–∞—Ç {chat_id} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return False

async def fetch_emails():
    global mail_connection, cached_folder

    # –ü—Ä–æ—Ñ–∏–ª–∏–Ω–≥ –ø–∞–º—è—Ç–∏
    process = psutil.Process()
    logger.info(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {process.memory_info().rss/1024/1024:.2f} MB")
    tracemalloc.start()
    start_snapshot = tracemalloc.take_snapshot()

    try:
        # (Re)connect IMAP
        if not mail_connection or not getattr(mail_connection, "socket", None):
            if mail_connection:
                try:
                    mail_connection.logout()
                except: pass
            mail_connection = imaplib.IMAP4_SSL(IMAP_SERVER)
            mail_connection.login(EMAIL, PASSWORD)
            logger.info("IMAP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

        folder = cached_folder or TARGET_FOLDER
        status, _ = mail_connection.select(f'"{folder}"')
        if status != "OK":
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É {folder}, —Å–±—Ä–æ—Å –∫—ç—à–∞")
            save_cached_folder(None)
            mail_connection.logout()
            mail_connection = None
            return

        # –ò—â–µ–º –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –æ—Ç –Ω—É–∂–Ω–æ–≥–æ From
        status, data = mail_connection.search(None, f'(UNSEEN FROM "{ALLOWED_SENDER_EMAIL}")')
        if status != "OK":
            logger.error("IMAP search failed")
            return

        for e_id in data[0].split()[:MAX_EMAILS]:
            try:
                _, msg_data = mail_connection.fetch(e_id, "(RFC822)")
                msg = email.message_from_bytes(msg_data[0][1])

                # 1) –ñ—ë—Å—Ç–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Return-Path
                rp = msg.get("Return-Path", "")
                if ALLOWED_DOMAIN not in rp.lower():
                    logger.warning(f"–ü–∏—Å—å–º–æ {e_id} —Å Return-Path {rp} ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    mail_connection.store(e_id, "+FLAGS", "\\Seen")
                    continue

                # 2) –ü–∞—Ä—Å–∏–º —Ç–µ–ª–æ
                body = ""
                if msg.is_multipart():
                    for part in msg.walk():
                        if part.get_content_type() == "text/plain":
                            body = part.get_payload(decode=True).decode(errors="ignore")
                            break
                else:
                    body = msg.get_payload(decode=True).decode(errors="ignore")

                # 3) –ò—â–µ–º —Å—Ç—Ä–æ–≥–æ –∫–æ–¥
                code_match = re.search(r'–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥:\s*(\d{6})\b', body)
                if not code_match:
                    logger.warning(f"–ü–∏—Å—å–º–æ {e_id} –±–µ–∑ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∫–æ–¥–∞ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    mail_connection.store(e_id, "+FLAGS", "\\Seen")
                    continue
                code = code_match.group(1)

                # 4) –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è URL
                urls = re.findall(r'https?://\S+', body)
                if any(not url.startswith(ALLOWED_URL_PREFIX) for url in urls):
                    logger.warning(f"–ü–∏—Å—å–º–æ {e_id} —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ —Å—Å—ã–ª–∫–∏ {urls} ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    mail_connection.store(e_id, "+FLAGS", "\\Seen")
                    continue

                # –í—Å—ë OK ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
                text = (
                    f"üîê *–ù–æ–≤—ã–π –∫–æ–¥ SSPVO*\n\n"
                    f"–ö–æ–¥: `{code}`\n\n"
                    f"[–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è]({ALLOWED_URL_PREFIX}account/user/20191/emailcode)"
                )
                sent = await bot.send_message(
                    chat_id=CHAT_ID,
                    text=text,
                    parse_mode="Markdown",
                    disable_web_page_preview=True
                )
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {sent.message_id} –¥–ª—è –ø–∏—Å—å–º–∞ {e_id}")

                # –ü–æ–º–µ—á–∞–µ–º –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º –∏ —Å—Ç–∞–≤–∏–º –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
                mail_connection.store(e_id, "+FLAGS", "\\Seen")
                async with queue_lock:
                    delete_queue.append((sent.chat_id, sent.message_id, asyncio.get_event_loop().time()))
                    save_delete_queue()

            except Exception as inner:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∏—Å—å–º–∞ {e_id}: {inner}")
                continue

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ fetch_emails: {e}")
        save_cached_folder(None)  # —Å–±—Ä–æ—Å–∏–º –∫—ç—à, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ —É–ø–∞–ª–æ
    finally:
        if mail_connection:
            try:
                mail_connection.logout()
                mail_connection = None
            except: pass

        # –õ–æ–≥–∏ —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏
        end_snapshot = tracemalloc.take_snapshot()
        for stat in end_snapshot.compare_to(start_snapshot, "lineno")[:5]:
            logger.info(f"Leak: {stat}")
        tracemalloc.stop()
        gc.collect()

async def auto_delete_messages():
    while True:
        await asyncio.sleep(CHECK_INTERVAL)
        now = asyncio.get_event_loop().time()
        async with queue_lock:
            while delete_queue and now - delete_queue[0][2] >= DELETE_AFTER:
                cid, mid, _ = delete_queue.popleft()
                if await verify_message_exists(cid, mid):
                    try:
                        await bot.delete_message(chat_id=cid, message_id=mid)
                        logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {mid}")
                    except Exception as e:
                        logger.error(f"Failed to delete {mid}: {e}")
                save_delete_queue()

async def run_email_loop():
    while True:
        await fetch_emails()
        await asyncio.sleep(CHECK_INTERVAL)

async def main():
    load_cached_folder()
    load_delete_queue()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

    app = Application.builder().token(TOKEN).build()
    await app.initialize()
    await app.start()

    asyncio.create_task(auto_delete_messages())
    asyncio.create_task(run_email_loop())

    # –ß—Ç–æ–±—ã –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –∑–∞–≤–µ—Ä—à–∞–ª—Å—è
    await asyncio.Event().wait()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

