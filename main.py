import imaplib
import email
from email.header import decode_header
import asyncio
from telegram import Bot
import re
from charset_normalizer import detect
import pickle
import os
import logging
import psutil
import gc
import tracemalloc
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(message)s')
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è


bot = Bot(token=TOKEN)
cached_folder = None
mail_connection = None

def load_cached_folder():
    global cached_folder
    if os.path.exists(CACHE_FILE):
        try:
            with open(CACHE_FILE, 'rb') as f:
                cached_folder = pickle.load(f)
                logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω –∫—ç—à: {cached_folder}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞: {e}")
            cached_folder = None
    return cached_folder

def save_cached_folder(folder_name):
    global cached_folder
    cached_folder = folder_name
    try:
        with open(CACHE_FILE, 'wb') as f:
            pickle.dump(folder_name, f)
        logger.info(f"–ö—ç—à —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {folder_name}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞: {e}")

def extract_email_address(from_header):
    if not from_header:
        return ""
    match = re.search(r'<(.+?)>', from_header)
    return match.group(1).lower() if match else from_header.lower()

async def fetch_emails():
    global mail_connection, cached_folder
    process = psutil.Process()
    memory_usage = process.memory_info().rss / 1024 / 1024
    logger.info(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {memory_usage:.2f} MB")

    tracemalloc.start()
    start_snapshot = tracemalloc.take_snapshot()

    try:
        # –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if not mail_connection or not mail_connection.socket:
            if mail_connection:
                try:
                    mail_connection.logout()
                    logger.info("–ü—Ä–µ–¥—ã–¥—É—â–µ–µ IMAP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
                except:
                    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
            mail_connection = imaplib.IMAP4_SSL(IMAP_SERVER)
            mail_connection.login(EMAIL, PASSWORD)
            logger.info("–ù–æ–≤–æ–µ IMAP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

        target_folder = cached_folder if cached_folder else TARGET_FOLDER
        logger.info(f"–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ø–∞–ø–∫–µ: {target_folder}")
        status, _ = mail_connection.select(f'"{target_folder}"')
        if status != "OK":
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É: {target_folder}. –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à...")
            cached_folder = None
            save_cached_folder(None)
            if mail_connection:
                mail_connection.logout()
                mail_connection = None
            return

        logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–ø–∫—É: {target_folder}")

        status, messages = mail_connection.search(None, f'(UNSEEN FROM "{ALLOWED_SENDER_EMAIL}")')
        if status != "OK":
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–∏—Å–µ–º")
            return

        email_ids = messages[0].split()[:MAX_EMAILS]  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∏—Å–ª–∞ –ø–∏—Å–µ–º
        for e_id in email_ids:
            try:
                _, msg_data = mail_connection.fetch(e_id, "(RFC822)")
                raw_email = msg_data[0][1]
                msg = email.message_from_bytes(raw_email)

                subject, encoding = decode_header(msg["Subject"])[0]
                if isinstance(subject, bytes):
                    subject = subject.decode(encoding or "utf-8", errors='ignore')

                from_ = msg.get("From", "")
                actual_email = extract_email_address(from_)
                if ALLOWED_SENDER_EMAIL.lower() not in actual_email:
                    continue

                body = ""
                if msg.is_multipart():
                    for part in msg.walk():
                        if part.get_content_type() == "text/plain":
                            body = part.get_payload(decode=True).decode(errors='ignore')
                            break
                else:
                    body = msg.get_payload(decode=True).decode(errors='ignore')

                code_match = re.search(r'–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥:\s*(\d{6})', body)
                message_text = f"üîê *–ù–æ–≤—ã–π –∫–æ–¥ SSPVO*\n\n–ö–æ–¥: `{code_match.group(1)}`\n\n[–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è](http://10.3.60.2/account/user/20191/emailcode)" if code_match else f"‚úâÔ∏è *–ü–∏—Å—å–º–æ –æ—Ç SSPVO*\n\n{body[:500]}"  # –û–≥—Ä–∞–Ω–∏—á–∏–º —Ç–µ–ª–æ

                try:
                    sent_message = await bot.send_message(chat_id=CHAT_ID, text=message_text, parse_mode="Markdown", disable_web_page_preview=True)
                    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø–∏—Å—å–º–∞ {e_id}")

                    # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç
                    asyncio.create_task(delete_after_delay(sent_message.chat_id, sent_message.message_id, delay=15 * 60))
                    """await bot.send_message(chat_id=CHAT_ID, text=message_text, parse_mode="Markdown", disable_web_page_preview=True)
                    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø–∏—Å—å–º–∞ {e_id}")"""
                    mail_connection.store(e_id, "+FLAGS", "\\Seen")
                except Exception as telegram_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram –¥–ª—è –ø–∏—Å—å–º–∞ {e_id}: {telegram_error}")
                    continue

                # –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏
                del msg, raw_email, msg_data, subject, from_, body, message_text, code_match
                gc.collect()

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∏—Å—å–º–∞ {e_id}: {e}")
                continue

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        if cached_folder:
            logger.info("–°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
            cached_folder = None
            save_cached_folder(None)
    finally:
        if mail_connection:
            try:
                mail_connection.logout()
                mail_connection = None
                logger.info("IMAP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            gc.collect()

    # –ê–Ω–∞–ª–∏–∑ —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏
    end_snapshot = tracemalloc.take_snapshot()
    top_stats = end_snapshot.compare_to(start_snapshot, 'lineno')
    for stat in top_stats[:10]:  # –£–≤–µ–ª–∏—á–∏–º –¥–æ 10 –¥–ª—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
        logger.info(f"–¢–æ–ø —É—Ç–µ—á–∫–∞ –ø–∞–º—è—Ç–∏: {stat}")

async def delete_after_delay(chat_id, message_id, delay=300):
    try:
        await asyncio.sleep(delay)
        await bot.delete_message(chat_id=chat_id, message_id=message_id)
        logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –∏–∑ —á–∞—Ç–∞ {chat_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {e}")

async def main():
    load_cached_folder()
    logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ {CHECK_INTERVAL} —Å–µ–∫—É–Ω–¥, –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–∞–ø–∫–µ '{TARGET_FOLDER}'...")
    while True:
        await fetch_emails()
        await asyncio.sleep(CHECK_INTERVAL)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        if 'mail_connection' in globals() and mail_connection:
            try:
                mail_connection.logout()
                logger.info("IMAP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ")
            except:
                pass
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")