import imaplib
import email
from email.header import decode_header
import schedule
import time
import asyncio
from telegram import Bot
import re
from charset_normalizer import detect
import pickle
import os


# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è


bot = Bot(token=TOKEN)
cached_folder = None


def load_cached_folder():
    global cached_folder
    if os.path.exists(CACHE_FILE):
        try:
            with open(CACHE_FILE, "rb") as f:
                cached_folder = pickle.load(f)
                print(f"–ó–∞–≥—Ä—É–∂–µ–Ω –∫—ç—à: {cached_folder}")
        except:
            print("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞, –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫")
            cached_folder = None
    return cached_folder


def save_cached_folder(folder_name):
    global cached_folder
    cached_folder = folder_name
    try:
        with open(CACHE_FILE, "wb") as f:
            pickle.dump(folder_name, f)
        print(f"–ö—ç—à —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {folder_name}")
    except:
        print("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞")

def decode_folder_name(folder_bytes):
    """–î–µ–∫–æ–¥–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –∏–∑ IMAP-—Ñ–æ—Ä–º–∞—Ç–∞ (–≤–∫–ª—é—á–∞—è UTF-7)"""
    try:
        folder_str = folder_bytes.decode('utf-7', errors='ignore')
        parts = re.split(r'"/"', folder_str)
        if len(parts) > 1:
            return parts[-1].strip().strip('"')
        return folder_str.strip().strip('"')
    except:
        try:
            result = detect(folder_bytes)
            encoding = result['encoding'] or 'utf-8'
            folder_str = folder_bytes.decode(encoding, errors='ignore')
            parts = re.split(r'"/"', folder_str)
            if len(parts) > 1:
                return parts[-1].strip().strip('"')
            return folder_str.strip().strip('"')
        except:
            return str(folder_bytes)

def find_target_folder(mail, target_name):
    """–ù–∞—Ö–æ–¥–∏—Ç –ø–∞–ø–∫—É –ø–æ –∏–º–µ–Ω–∏"""
    status, folders = mail.list()
    if status != "OK":
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–∞–ø–æ–∫")
        return None

    print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–ø–∫–∏ (–¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ):")
    for folder_bytes in folders:
        folder_str = decode_folder_name(folder_bytes)
        print(f" - {folder_str}")
        if target_name.lower() in folder_str.lower():
            if '"/"' in folder_str:
                return folder_str.split('"/"')[-1].strip('"')
            return folder_str
    return None

def extract_email_address(from_header):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —á–∏—Å—Ç—ã–π email –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ From"""
    if not from_header:
        return ""
    match = re.search(r'<(.+?)>', from_header)
    return match.group(1).lower() if match else from_header.lower()

async def fetch_emails():
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É
        mail = imaplib.IMAP4_SSL(IMAP_SERVER)
        mail.login(EMAIL, PASSWORD)

        # –ü–æ–∏—Å–∫ –ø–∞–ø–∫–∏ "SSPVO"
        target_folder = find_target_folder(mail, "SSPVO")
        if not target_folder:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–∞–ø–∫—É 'SSPVO'. –ü—Ä–æ–≤–µ—Ä—è–µ–º INBOX...")
            target_folder = "INBOX"

        print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–ø–∫—É: {target_folder}")
        status, _ = mail.select(f'"{target_folder}"')
        if status != "OK":
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É: {target_folder}")
            return

        # –ü–æ–∏—Å–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º
        status, messages = mail.search(None, "(UNSEEN)")
        if status != "OK":
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–∏—Å–µ–º")
            return

        email_ids = messages[0].split()
        for e_id in email_ids:
            try:
                _, msg_data = mail.fetch(e_id, "(RFC822)")
                raw_email = msg_data[0][1]
                msg = email.message_from_bytes(raw_email)

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–º—ã –ø–∏—Å—å–º–∞
                subject, encoding = decode_header(msg["Subject"])[0]
                if isinstance(subject, bytes):
                    subject = subject.decode(encoding or "utf-8", errors='ignore')

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                from_ = msg.get("From", "")
                actual_email = extract_email_address(from_)
                if ALLOWED_SENDER_EMAIL.lower() not in actual_email:
                    continue

                # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–∏—Å—å–º–∞
                body = ""
                if msg.is_multipart():
                    for part in msg.walk():
                        if part.get_content_type() == "text/plain":
                            body = part.get_payload(decode=True).decode(errors='ignore')
                            break
                else:
                    body = msg.get_payload(decode=True).decode(errors='ignore')

                # –ü–æ–∏—Å–∫ –∫–æ–¥–∞
                code_match = re.search(r'–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥:\s*(\d{6})', body)
                if code_match:
                    code = code_match.group(1)
                    message_text = f"üîê *–ù–æ–≤—ã–π –∫–æ–¥ SSPVO*\n\n–ö–æ–¥: `{code}`\n\n[–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è](http://10.3.60.2/account/user/20191/emailcode)"
                else:
                    message_text = f"‚úâÔ∏è *–ü–∏—Å—å–º–æ –æ—Ç SSPVO*\n\n{body}"

                # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
                await bot.send_message(
                    chat_id=CHAT_ID,
                    text=message_text,
                    parse_mode="Markdown",
                    disable_web_page_preview=True
                )

                # –ü–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
                mail.store(e_id, "+FLAGS", "\\Seen")

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∏—Å—å–º–∞ {e_id}: {e}")
                continue

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
    finally:
        try:
            mail.close()
            mail.logout()
        except:
            pass

def schedule_task():
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤ schedule"""
    asyncio.run(fetch_emails())

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
schedule.every(1).minutes.do(schedule_task)

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ü–æ–∏—Å–∫ –ø–∞–ø–∫–∏ 'SSPVO'...")
while True:
    schedule.run_pending()
    time.sleep(1)